2.7.15:
⚖️ QUALITY ADJUSTMENT: Better compression for AV1 Archive mode
- CHANGED: AV1 Archive CRF reduced from 18 to 22
- Reason: CRF 18 was too high quality, often resulting in 0% size reduction
- Impact: Better compression while maintaining excellent visual quality
- Quality: CRF 22 AV1 ≈ CRF 20 HEVC (still archival-grade)
- Result: More reliable space savings on already-compressed files

2.7.14:
🔧 AUTO-CROP FIX: Prevent encoding failures from too-small cropped resolutions
- FIXED: Auto-crop can create resolutions below hardware encoder minimum (128x128)
- Added: Minimum resolution check before applying crop filter
- Error prevented: "Hardware does not support encoding at size XxY"
- Example: 720x300 cropped to 192x64 → Skip crop, encode at 720x300
- Result: XVID files with extreme letterboxing now encode successfully

2.7.13:
🔧 CODEC COMPATIBILITY FIX: Support for MPEG-4/XVID and other legacy codecs
- FIXED: MPEG-4 Part 2 (XVID, DivX) encoding failures
- Added: Automatic detection of VAAPI-compatible source codecs
- Smart fallback: Software decode + hardware encode for unsupported codecs
- Supported hardware decode: H.264, HEVC, AV1, VP8, VP9, MPEG-2
- Fallback for: MPEG-4, MPEG-1, VC-1, and other legacy codecs
- Result: All video files can now be transcoded with AV1/HEVC GPU encoding

2.7.12:
🐛 CRITICAL BUG FIX: Library-specific settings not being applied during encoding
- FIXED: Worker process now correctly loads library-specific settings
- Bug: on_worker_process() was creating Settings() without library_id parameter
- Impact: All libraries were using default settings instead of their configured settings
- Result: Easy Mode, AV1 Archive, and all custom settings now work correctly
- Affects: All users with multiple libraries or custom per-library configurations

2.7.11:
🎬 AV1 ARCHIVE MODE: New quality preset for maximum compression without quality loss
- NEW: "AV1 Archive" quality option in Easy Mode
- GPU-accelerated AV1 encoding for RDNA 2+ GPUs (tested on Radeon 780M)
- High quality setting (CRF 18) for archival-grade compression
- 30%+ better compression than HEVC with no visible quality loss
- Perfect for: Long-term storage, large libraries, bandwidth-limited streaming
- Speed: ~4-5x realtime on RDNA 3 GPUs
- Use when: You want smallest files without sacrificing quality

2.7.10:
🎯 ENHANCED SKIP: Now skips well-compressed files regardless of codec
- CRITICAL: Bitrate check now applies to ALL codecs (H.264, HEVC, AV1), not just same-codec
- Fixed: Well-compressed H.264 files (low bitrate) are now skipped instead of wastefully re-encoded
- Example: H.264 at 2.1 Mbps (already below HEVC 4.0 Mbps target) won't be re-encoded
- Logic: Skip if source bitrate ≤ 120% of target codec's optimal bitrate
- Impact: Saves processing on already-efficient encodes from streaming services
- Result: Eliminates 0% file size reduction transcodes

2.7.9:
✨ SMART SKIP: Codec efficiency hierarchy prevents wasteful transcoding
- NEW: Skip AV1 files when targeting HEVC (AV1 is more efficient, no benefit to re-encode)
- NEW: Codec efficiency ranking: AV1 (best) > HEVC > H.264 (least efficient)
- Fixed: Plugin now respects codec efficiency and won't downgrade from better codec
- Example: AV1-encoded Witcher episodes won't be re-encoded to HEVC anymore
- Result: Saves hours of processing time on already-optimal modern encodes
- Impact: Netflix/Amazon AV1 releases, Disney+ releases automatically skipped

2.7.8:
🐛 CRITICAL FIX: Enhanced bitrate detection with fallback calculation
- Fixed: detect_source_bitrate() now calculates from file size/duration when stream bitrate unavailable
- Fixed: Some files (like remuxes) don't report stream bitrate in ffprobe
- Added: Fallback calculation using (file_size * 8) / duration * 0.7 for video bitrate
- Result: Bitrate cap now applies correctly to all files (not just those with stream metadata)
- Prevents HEVC→HEVC transcodes from bloating without cap

2.7.7:
🐛 CRITICAL FIX: Prevent constant quality mode from creating bloated files
- Added: Automatic bitrate cap at 1.5x source bitrate for CRF and VBR modes
- Fixed: GPU encoding with constant quality could exceed source bitrate by 2-3x
- Added: detect_source_bitrate() function to read video-only bitrate from source
- Example: 4Mbps H.264 source → capped at 6Mbps HEVC output (prevents 10+ Mbps bloat)
- Protects against "Reject File if Larger than Original" failures
- Both CRF and VBR modes now respect source bitrate limits

2.7.6:
✨ ENHANCEMENT: Skip efficiently-encoded files to save processing time
- Fixed: is_already_optimal() now correctly detects video-only bitrate (not total file bitrate)
- Enhancement: Skip files already encoded at or below optimal bitrate for their resolution
- Prevents re-encoding well-compressed 4K HEVC files that would result in larger output
- Example: 4K HEVC at 2Mbps (efficient) won't be re-encoded at 15Mbps (wasteful)
- Saves hours of processing time on already-optimized content

2.7.5:
🐛 CRITICAL FIX: Completed tasks not appearing in data panels
- Fixed: file_out path not being updated in data dict when changing output container
- Root cause: v2.7.0 output container feature modified local file_out but never wrote back to data['file_out']
- Result: Unmanic couldn't find completed files at expected path
- All completed transcodes now properly appear in history/stats panels

2.7.4:
🐛 FIX: AAC multi-channel audio encoding issues
- Fixed: "Unsupported channel layout" error with 5.1/7.1 AAC audio
- Changed: Easy Mode now uses 'copy' for audio codec (most sources already have AAC)
- Added: Proper channel layout handling for Advanced mode AAC re-encoding
- Prevents failures when transcoding files with multi-channel AAC audio
- Audio copying in Easy Mode avoids unnecessary re-encoding and quality loss

2.7.3:
🐛 CRITICAL FIX: Easy Mode showing duplicate "Hardware Selection" label
- Fixed: easy_quality was displaying with wrong label (Hardware Selection instead of Quality Preset)
- Root cause: Visibility functions were hardcoded to copy "easy_hardware" form_settings
- Now correctly shows: Hardware Selection + Quality Preset + Output Container
- Made visibility functions accept setting_key parameter for correct label inheritance

2.7.2:
🐛 FIX: Output container selection now properly hidden in Expert mode
- Fixed: Output container dropdown was showing in all modes
- Now shows only in Easy and Advanced modes
- Expert mode uses output path from command directly

2.7.1:
🐛 CRITICAL FIX: Attached pictures (cover art) causing encoding failures
- Fixed: Stream mapping now excludes attached pictures (MJPEG cover art)
- Changed from `-map 0` to selective mapping `-map 0:v:0 -map 0:a? -map 0:s?`
- Prevents "Failed to inject frame into filter network" errors
- Fixes "Impossible to convert between formats" errors with cover art
- Movies with embedded poster images will now transcode correctly

2.7.0:
🚀 MAJOR UPDATE: Enhanced Easy Mode & Expert Mode Features
- NEW: Easy Mode Quality Selector - Choose Fast/Balanced/Quality preset
  - Fast: Quick encoding with larger files (CRF 26, VBR)
  - Balanced: Good quality/speed balance (CRF 23, VBR) - recommended
  - Quality: Best quality, slower (CRF 20, CRF mode)
- NEW: Output Container Selection - Choose MKV, MP4, or same as source
  - Works across all modes (Easy/Advanced/Expert)
  - Automatically changes output file extension
- NEW: Expert Mode Command Templates - Dropdown with common presets
  - GPU HEVC, CPU HEVC, GPU H.264, CPU H.264, AV1
  - No need to write commands from scratch anymore
- NEW: Expert Mode Extended Variables
  - {width} - Video width in pixels
  - {height} - Video height in pixels
  - {bitrate} - Source bitrate estimate
  - {duration} - Video duration in seconds
  - {codec} - Source codec name
  - Existing: {input}, {output}, {render_device}
- IMPROVED: Easy Mode now gives more control without complexity

2.6.2:
✨ IMPROVED: Expert Mode now has helpful default command
- Expert mode command field now pre-filled with Easy Mode equivalent
- Default: ffmpeg -vaapi_device {render_device} -hwaccel vaapi -hwaccel_output_format vaapi -i {input} -c:v hevc_vaapi -qp 23 -c:a aac -b:a 192k {output}
- Shows available variables in label: {input}, {output}, {render_device}
- Makes it easier to start customizing without writing from scratch

2.6.1:
🐛 FIX: Conditional settings display now working correctly
- Fixed: Settings now properly hide/show based on Configuration Mode selection
- Easy Mode shows only hardware selector
- Advanced Mode shows all detailed settings
- Expert Mode shows only custom command field
- UI is now much cleaner and less confusing

2.6.0:
🎯 MAJOR UPDATE: Three-Tier Configuration Modes
- NEW: Easy Mode - Just select hardware (GPU/CPU/Auto), all other settings use optimal defaults
  - Perfect for beginners - no confusing options
  - Automatically enables HDR preservation, auto-crop, AAC audio, HEVC codec
  - Just pick your hardware preference and go!
- NEW: Expert Mode - Custom FFmpeg command line with variable substitution
  - Full control over encoding command
  - Variables: {input}, {output}, {render_device}
  - For power users who want complete control
- IMPROVED: Preset profiles now show which hardware they use
  - Fast [GPU only], Balanced [Auto GPU/CPU], Quality [CPU only], Archive [CPU only]
  - No more confusion about what hardware will be used
- IMPROVED: Better UI organization for beginners vs advanced users
- Advanced Mode remains unchanged (all existing settings available)

2.5.1:
🚀 MAJOR UPDATE: Smart File Processing & Validation
- NEW: Pre-flight file validation prevents corrupted/0-byte files from being queued
  - Checks file exists and is not empty (0 bytes)
  - Validates file can be probed with ffprobe
  - Ensures file has valid duration (> 1 second)
  - Categorizes errors: FILE_NOT_FOUND, FILE_CORRUPTED, FILE_TIMEOUT, FILE_ERROR
- NEW: Skip already optimal files feature
  - Analyzes current bitrate vs optimal bitrate for resolution
  - Skips transcoding if file is already well-compressed (within 120% of optimal)
  - Saves hours of unnecessary processing on already-good files
- IMPACT: Would have prevented 4,700+ failures from corrupted files
- Better logging: Clear categorized warnings for skipped/invalid files
- Performance: Faster library scans (skip optimal files early)

2.4.2:
🐛 FIX: GPU detection for Radeon 780M/760M (Phoenix APU)
- Added device ID 150e to RDNA 3 detection list
- Fixes "Unknown AMD GPU" issue on Phoenix APUs (Ryzen 7040/8040 series)
- GPU encoding now works correctly on Radeon 780M/760M integrated graphics
- Result: VAAPI hardware encoding properly detected and used

2.4.1:
🐛 CRITICAL FIX: Progress tracking and ETC display
- Fixed: Progress percent now returned as INTEGER (not string with "%")
- Fixed: Always returns dict with 'percent', 'paused', 'killed' keys
- Fixed: Properly handles 'unset' parameter for process completion
- Fixed: PID registration with worker monitor for elapsed time tracking
- Fixed: Regex pattern for FFmpeg time output (handles centiseconds)
- Result: Progress bar and ETC now display correctly in UI
- Note: This was a regression from v2.3.2 that broke progress tracking

2.4.0 - COMPREHENSIVE EDITION:
🎉 MAJOR RELEASE - Complete plugin overhaul with 24+ new features

⭐ PRIORITY 1: Critical Fixes
- ✅ 10-bit HEVC support with auto-profile detection (main/main10)
- ✅ Intelligent GPU capability detection (RDNA1/2/3/3.5 generations)
- ✅ Subtitle stream preservation (copy/srt/ass formats)
- ✅ Multi-audio track handling (all/first/language selection)
- ✅ Auto-fallback to CPU for 10-bit on older GPUs

⭐ PRIORITY 2: Quality & Efficiency
- ✅ Resolution-based bitrate optimization (720p→4K auto-scaling)
- ✅ CRF quality mode (constant quality encoding)
- ✅ Auto-bitrate calculator per codec (HEVC/H.264/AV1)
- ✅ Scene-based encoding for libx265 (adaptive quality)
- ✅ Bitrate sanity checking with warnings

⭐ PRIORITY 3: Feature Enhancements
- ✅ HDR metadata preservation (HDR10/HLG detection & passthrough)
- ✅ AV1 codec support (hardware + software encoders)
- ✅ GPU generation detection (device ID → RDNA/GCN mapping)
- ✅ Multi-audio language filtering
- ✅ Downmix 5.1/7.1 to stereo option
- ✅ Subtitle format conversion (copy/srt/ass)

⭐ PRIORITY 4: User Experience
- ✅ Preset profiles system (Fast/Balanced/Quality/Archive)
- ✅ Dry-run mode (preview FFmpeg command before execution)
- ✅ Comprehensive pre-flight validation with helpful error messages
- ✅ Test encode mode (process first N seconds only)
- ✅ Enhanced logging with GPU model, resolution, bit depth
- ✅ Skip 10-bit files option

⭐ PRIORITY 5: Advanced Features
- ✅ Auto-crop detection (remove black bars >5% crop)
- ✅ Scene detection for x265 (scenecut + adaptive quantization)
- ✅ Psychovisual optimizations (psy-rd, psy-rdoq)
- ✅ Two-pass encoding prep (foundation for future implementation)

📊 NEW SETTINGS (24 total):
- use_preset / preset_profile (Fast/Balanced/Quality/Archive)
- rate_control (VBR/CRF/CBR)
- crf_value (18-28 quality scale)
- use_auto_bitrate (resolution-based optimization)
- audio_mode (all/first/language)
- audio_language (3-letter code)
- downmix_multichannel (5.1→stereo)
- copy_subtitles / subtitle_format
- preserve_hdr (HDR10/HLG metadata)
- auto_crop (black bar removal)
- use_scene_detection (libx265 adaptive quality)
- dry_run (preview mode)
- test_encode_duration (partial encode testing)
- skip_10bit_files (skip entirely)

🔧 TECHNICAL IMPROVEMENTS:
- GPU capability database (50+ AMD device IDs)
- RDNA 3.5 detection (Ryzen AI processors)
- Main 10 profile support for 10-bit HEVC
- AV1 VAAPI encoder support (RDNA 2+)
- Intelligent encoder fallback chain
- HDR color space detection (bt709/bt2020/etc)
- Crop detection with significance threshold
- Effective settings system (preset merging)
- Pre-flight validation framework
- Bitrate calculation per resolution/codec

📝 CODE IMPROVEMENTS:
- 1,120 lines (was 589 - comprehensive feature set)
- Modular function architecture
- Extensive error handling
- Helper functions for all detections
- Clear separation of concerns
- Comprehensive inline documentation
- Preset profile system
- Settings inheritance

🎯 DEFAULT BEHAVIOR:
- Preset: Balanced (recommended for most users)
- Auto-bitrate: Enabled (smart scaling)
- Audio: Copy all tracks (preserve multi-language)
- Subtitles: Copy all tracks
- HDR: Preserve metadata
- Mode: Auto (GPU with CPU fallback)

🔥 BREAKING CHANGES:
- None! Fully backward compatible
- Existing settings preserved
- New settings default to sensible values

⚡ PERFORMANCE:
- No performance regression
- Smarter bitrate = smaller files at same quality
- CRF mode = better quality/size ratio
- GPU capability detection prevents failed encodes

🐛 BUG FIXES FROM v2.3.2:
- All previous fixes retained
- Enhanced 10-bit handling
- Better GPU detection
- More robust error handling

🎓 RECOMMENDED USAGE:

**Casual Users:**
- Select "Balanced" preset → Done!

**Quality Focused:**
- Select "Quality" or "Archive" preset
- Enable "use_scene_detection" for x265

**Speed Focused:**
- Select "Fast" preset (GPU only)

**Testing:**
- Enable "dry_run" to preview command
- Set "test_encode_duration" to 30 for 30-second test

**10-bit Sources:**
- RDNA 2+: Works automatically (main10 profile)
- Older GPUs: Auto-falls back to CPU
- Or enable "skip_10bit_files" to ignore

---

2.3.2:
- CRITICAL FIX: Skip files already in target codec correctly
- Fixed: add_file_to_pending_tasks now explicitly set to False when skipping
- Added: detect_video_bit_depth() function to detect 8-bit/10-bit/12-bit video
- Enhanced: Skip 10-bit HEVC files (AMD VAAPI cannot transcode 10-bit → 8-bit)
- Prevents "No usable encoding profile found" errors on 10-bit sources
- Log message now indicates when 10-bit files are skipped
- Fixes issue where already-encoded HEVC files were re-queued

2.3.1:
- CRITICAL FIX: ETC (Estimated Time to Completion) now works! 🎉
- Progress parser now wraps Unmanic's default parser for proper registration
- Delegates PID and start_time registration to default parser
- Worker monitor now tracks elapsed time correctly
- ETC display in frontend now has all required data (percent + elapsed)
- Progress bar AND ETC both working simultaneously
- Clear browser cache after upgrade: Ctrl+Shift+R (or Cmd+Shift+R on Mac)

2.3.0:
- CRITICAL: Added on_library_management_file_test() function
- Files are now properly detected during library scans
- Video files are checked and added to pending tasks
- Skips files already in target codec (unless target_codec=copy)
- Supports all common video formats (mkv, mp4, avi, mov, etc.)
- This fixes the "no files in pending after scan" issue

2.2.1:
- Fixed ETC calculation by returning percent as integer (not string)
- Frontend ETC calculation requires numeric percent value
- Progress tracking now fully functional with accurate ETC display

2.2.0:
- Fixed ETC (Estimated Time to Completion) display
- Progress parser now returns percent as STRING (required by Unmanic)
- Simplified parser - removed unnecessary monitor access
- ETC now calculated correctly based on elapsed time and percentage
- Verified compatibility with Unmanic's progress tracking system

2.1.9:
- Implemented custom FFmpeg progress parser for accurate progress tracking
- Added get_video_duration() function using ffprobe to determine video length
- Added FFmpegProgressParser class to parse FFmpeg time= output
- Progress bar now shows accurate percentage (0-100%)
- Parses FFmpeg's "time=HH:MM:SS.MS" output for precise progress
- Fixed "progress bar empty" issue
- Progress updates in real-time during encoding
- Note: ETC display issue discovered (fixed in v2.2.0)

2.1.8:
- Enhanced H.265/HEVC encoding quality with optimized parameters
- Changed default mode from cpu_only to auto (prefer GPU, fallback to CPU)
- Increased default bitrate: 4M average, 6M max (better quality)
- Added VBR (Variable Bitrate) rate control mode for VAAPI
- Lowered QP from 23 to 20 for higher quality VAAPI encoding
- Added HEVC profile/level specification (main profile, level 5.1)
- Improved audio: 192k bitrate with stereo output (-ac 2)
- Added -movflags +faststart for better streaming/playback support
- Settings now match optimized production encoding standards

2.1.7:
- Removed custom progress parser to use Unmanic's built-in FFmpeg handler
- Unmanic's default progress detection provides better percentage and ETC
- Fixes missing progress bar and ETC in UI
- Simpler and more reliable progress tracking

2.1.6:
- Fixed: Progress parser returning None instead of empty dict
- Resolves "'NoneType' object has no attribute 'get'" error
- Progress parser now always returns a valid dictionary
- Enables proper progress display in Unmanic UI

2.1.5:
- Fixed: FFmpeg command argument order for VAAPI hardware acceleration
- Hardware acceleration options now correctly placed before input file
- Resolves "cannot be applied to output url" error
- Critical fix for GPU encoding to work properly

2.1.4:
- Added: Auto-install pciutils if missing (fixes GPU detection on fresh containers)
- Ensures lspci command is available for AMD GPU detection
- Prevents silent fallback to CPU when pciutils is not installed
- Critical fix for Unraid and Docker environments

2.1.3:
- Added: FFmpeg progress parser for real-time encoding progress display
- UI now shows percentage complete and ETC (estimated time to completion)
- Parses FFmpeg output (frame, time, speed) for accurate progress tracking

2.1.2:
- Added: Professional AMD-themed plugin icon (GPU chip design)
- Icon hosted on GitHub for display in Unmanic UI

2.1.1:
- Fixed: Added compatibility field to info.json for Unmanic plugin handler v2
- Critical: Resolves "incompatible plugin" error on installation

2.1.0:
- Changed default to HEVC CPU encoding for maximum space savings (48% reduction)
- Fixed CPU thread allocation for libx265 (uses pools instead of threads)
- Optimized default bitrates for HEVC (1M/2M instead of 2M/4M)
- Tested and verified HEVC VAAPI (20% savings, 31x speed)
- Tested and verified HEVC CPU (48% savings, 11x speed)
- Recommended settings now optimized for space saving with quality

2.0.3:
- Fixed AMF encoding parameters (removed invalid -rc vbr)
- Changed default to prefer VAAPI over AMF
- Tested all encoding modes: VAAPI ✅ CPU ✅ AMF ❌ (library missing)
- VAAPI H.264 encoding verified working at 32x realtime
- CPU encoding verified working with proper thread allocation
- Updated to use -usage transcoding for AMF (when available)

2.0.2:
- Added comprehensive documentation (README.md, description.md)
- Enhanced changelog with full history
- Improved plugin description in info.json
- Added detailed usage instructions
- Added troubleshooting guide
- Added hardware compatibility information
- Added performance benchmarks
- Better organization of documentation

2.0.1:
- Added proper UI controls for all settings
- Fixed form_settings with select dropdowns
- Added input_type and select_options for all settings
- Improved settings descriptions and labels
- Better user experience in settings UI

2.0.0:
- Complete rewrite following official Unmanic plugin patterns
- Fixed compatibility issues with Unmanic plugin validation
- Simplified Settings class (no __init__ override)
- Module-level on_worker_process function
- Proper error handling and logging
- Auto-detection of AMD CPU and GPU
- Support for AMF, VAAPI, and software encoders
- Encoding mode selection (auto/gpu_only/cpu_only)

1.1.x:
- Previous versions with compatibility issues
- Removed due to incompatibility with Unmanic validation
